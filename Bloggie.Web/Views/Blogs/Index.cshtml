@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager

@model Bloggie.Web.Models.ViewModels.BlogDetailsViewModel

@{
    ViewData["Title"] = Model.PageTitle;
}


<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">

            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>

                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>

                <div class="mb-3">
                    @if (signInManager.IsSignedIn(User))
                    {
                        if (Model.Liked)
                        {
                            <a style="cursor: pointer;">
                                <i class="bi bi-hand-thumbs-up-fill"></i>
                            </a>
                        }
                        else
                        {
                            <a id="btnLike" style="cursor: pointer;">
                                <i class="bi bi-hand-thumbs-up"></i>
                            </a>
                        }
                    }

                    <span id="totalLikes">@Model.TotalLikes</span> likes
                </div>

                <div class="mb-3 d-flex">
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.Name</span>
                    }
                </div>

                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3" />
                <div class="mb-3 blog-details-content">
                    @Html.Raw(Model.Content)

                    @if (Model.Content.Contains("<a class=\"fr-file\""))
                    {
                        <div id="documentContainer"></div>
                    }
                    @if (Model.DocumentFileNames != null && Model.DocumentFileNames.Any())
                    {
                        <div>
                            <h4>Attached Documents</h4>
                            <ul>
                                @foreach (var documentFile in Model.DocumentFileNames)
                                {
                                    <li>
                                        <a href="@Url.Content($"~/documents/{documentFile.FileName}")" target="_blank">
                                            View Attached Document @documentFile.FileName
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }

                </div>



                <div class="card">
                    <div class="card-header">
                        <h5>Comments</h5>

                        @if (signInManager.IsSignedIn(User))
                        {
                            <form method="post">
                                <div class="mb-3">
                                    <label class="form-label">Comment Description</label>
                                    <input type="text" class="form-control" asp-for="CommentDescription" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-dark">Submit</button>
                                    <input type="hidden" asp-for="Id" />
                                    <input type="hidden" asp-for="UrlHandle" />
                                </div>
                            </form>
                        }
                    </div>
                    <div class="card-body">
                        @if (Model.Comments != null && Model.Comments.Any())
                        {
                            @foreach (var comment in Model.Comments)
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div>
                                            @comment.Description
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span class="text-secondary">@comment.Username</span>
                                            <span class="text-secondary">@comment.DateAdded.ToShortDateString()</span>
                                            @*
                                <form method="post" action="@Url.Action("DeleteComment", "Blogs", new { commentId = comment.Id, urlHandle = Model.UrlHandle })">
                                <button type="submit" class="btn btn-link text-danger">
                                <i class="bi bi-trash"></i> Delete Comment
                                </button>
                                </form> *@

                                            @if (User.Identity.IsAuthenticated)
                                            {
                                                bool canDelete = User.IsInRole("Admin") || (User.Identity.Name == comment.Username);

                                                if (canDelete)
                                                {
                                                    <form method="post" action="@Url.Action("DeleteComment", "Blogs", new { commentId = comment.Id, urlHandle = Model.UrlHandle })">
                                                        <button type="submit" class="btn btn-link text-danger">
                                                            <i class="bi bi-trash"></i> Delete Comment
                                                        </button>
                                                    </form>
                                                }
                                            }


                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>



            }
            else
            {
                <p>Blog post not found!</p>
            }
        </div>
    </div>
</div>


@section Scripts {
    <script>
        const documentContainer = document.getElementById('documentContainer');

        function extractDocumentLinks(content) {
            const docLinks = content.match(/<a class="fr-file".*?<\/a>/g) || [];
            return docLinks;
        }

        function createDownloadButton(anchorTag) {
            const link = document.createElement('a');
            link.href = anchorTag.href; // Assuming href attribute contains the download URL
            link.className = 'btn btn-primary mt-3 download-button';
            link.innerHTML = 'Download File';

            // Add the download attribute to trigger the download behavior
            link.setAttribute('download', '');

            link.addEventListener('click', (event) => {
                event.preventDefault(); // Prevent the default behavior (navigation)

                // Call your download function here
                downloadFile(anchorTag.href);
            });

            return link;
        }

        function downloadFile(url) {
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Network response was not ok: ${response.status}`);
                    }
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;

                    // Extracting the file name from the URL or using a default name
                    const fileName = url.substring(url.lastIndexOf('/') + 1) || 'downloadedFile';
                    a.download = fileName;

                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                })
                .catch(error => {
                    console.error('Error downloading file:', error);
                });
        }

        const documentLinks = extractDocumentLinks('@Html.Raw(Model.Content)');

        if (documentContainer && documentLinks.length > 0) {
            documentLinks.forEach(docLink => {
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = docLink;

                const anchorTag = tempDiv.querySelector('.fr-file');

                if (anchorTag) {
                    const downloadButton = createDownloadButton(anchorTag);
                    documentContainer.appendChild(downloadButton);
                }
            });
        }
    </script>


    <script>
        const btnLikeElement = document.getElementById('btnLike');
        const totalLikeElement = document.getElementById('totalLikes');

        async function getTotalLikes() {
            fetch('/api/blogpostlike/@Model.Id/totalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            })
                .then(data => data.json())
                .then(result => totalLikeElement.innerHTML = result);
        }


        async function addLikeForBlog() {
            fetch('/api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({
                    blogPostId: '@Model.Id',
                    userId: '@userManager.GetUserId(User)'
                })
            }).then(() => {
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                btnLikeElement.removeEventListener('click', addLikeForBlog);
                getTotalLikes();
            });
        }


        btnLikeElement.addEventListener('click', addLikeForBlog);
    </script>
}
