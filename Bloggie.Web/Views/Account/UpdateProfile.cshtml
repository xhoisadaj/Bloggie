@model Bloggie.Web.Models.ViewModels.UpdateProfileViewModel

<div class="container mx-auto">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">

            <h1 class="mt-3 mb-3 h3">
                Profile
            </h1>
            @if (TempData["SuccessMessage"] != null)
            {
                <div id="success-toast" class="toast align-items-center" style="margin:auto" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-body">
                        @TempData["SuccessMessage"]
                    </div>
                </div>
            }
            @if (TempData["ErrorMessage"] != null)
            {
                <div id="success-toast" class="toast align-items-center" style="margin:auto" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-body">
                        @TempData["ErrorMessage"]
                    </div>
                </div>
            }
            <form asp-controller="Account" asp-action="UpdateProfile" method="post" class="container needs-validation" novalidate onsubmit="return validateForm()">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group" validate-me>
                    <label asp-for="Username"></label>
                    <input asp-for="Username" class="form-control" required />
                    <div class="invalid-feedback" asp-validation-for="Username">
                        Username is required.
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="Email"></label>
                    <input asp-for="Email" class="form-control" required />
                    <span asp-validation-for="Email" class="text-danger"></span>
                    <div class="invalid-feedback" asp-validation-for="Email">
                        Email is required.
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="CurrentPassword"></label>
                    <input asp-for="CurrentPassword" type="password" class="form-control" required />
                   
                    <div class="invalid-feedback" asp-validation-for="CurrentPassword">
                        Current Password is required.
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="NewPassword"></label>
                    <input asp-for="NewPassword" type="password" class="form-control" required />
                  
                    <div class="invalid-feedback" asp-validation-for="NewPassword">
                        New Password is required.
                    </div>
                </div>

                <div class="form-group">
                    <label asp-for="ConfirmNewPassword"></label>
                    <input asp-for="ConfirmNewPassword" type="password" class="form-control" required />
                    
                    <div class="invalid-feedback" asp-validation-for="ConfirmNewPassword">
                        Confirm New Password is required.
                    </div>
                </div>
                <br />
    <!-- Add more input fields for additional properties if needed -->

    <button type="submit" class="btn btn-primary">Update Profile</button>
</form>
        </div>
    </div>
</div>

<script>
    function validateForm() {
        var form = document.forms[0];
        var isValid = form.checkValidity();

        if (!isValid) {
            // Iterate over form elements to show/hide validation messages
            for (var i = 0; i < form.elements.length; i++) {
                var element = form.elements[i];

                // Skip non-input elements
                if (element.tagName.toLowerCase() !== 'input') {
                    continue;
                }

                // Find the corresponding invalid-feedback element
                var feedbackElement = element.nextElementSibling;
                if (feedbackElement && feedbackElement.classList.contains('invalid-feedback')) {
                    // Show or hide the validation message based on the input validity
                    feedbackElement.style.display = element.validity.valid ? 'none' : 'block';
                }
            }
        }

        return isValid;
    }


    // Helper function to add/remove is-invalid and is-valid classes based on field value
    function validateField(field) {
        if (!field.value.trim()) {
            // Add the is-invalid class to show the validation error message
            field.classList.add('is-invalid');
            // Remove the is-valid class to hide the valid checker
            field.classList.remove('is-valid');
        } else {
            // Add the is-valid class to show the valid checker
            field.classList.add('is-valid');
            // Remove the is-invalid class to hide the validation error message
            field.classList.remove('is-invalid');
        }
    }
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var successToast = document.getElementById('success-toast');

        if (successToast) {
            console.log('Success toast found');
            var toast = new bootstrap.Toast(successToast);
            toast.show();

            setTimeout(function () {
                toast.hide();
            }, 2000); // Set the time in milliseconds (2 seconds in this example)
        } else {
            console.log('Success toast not found');
        }
    });

</script>