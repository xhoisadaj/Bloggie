@model Bloggie.Web.Models.ViewModels.LoginViewModel

@{
}


<div class="container mx-auto">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">

             @if (TempData["ErrorMessage"] != null)
            {
            <div id="error-toast" class="toast align-items-center position-absolute top-50 start-50 translate-middle" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-body">
                    @TempData["ErrorMessage"]
                </div>
            </div>
            }
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>


            <h1 class="mt-3 mb-3 h3">
                Login
            </h1>

            <form method="post" class="container needs-validation" novalidate>
                <div class="mb-3" validate-me>
                    <label class="form-label">Username</label>
                    <input type="text" id="username" class="form-control" asp-for="Username" required />
                    <div class="invalid-feedback" asp-validation-for="Username">
                        Please enter a username.
                    </div>
                   
                </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <input type="password" id="password" class="form-control" asp-for="Password" required minlength="6" />
                  
                    <div class="invalid-feedback" asp-validation-for="Password">
                        Please enter a password that is at least 8 characters.
                    </div>
                </div>
                <p><a asp-action="ForgotPassword" asp-controller="Account">Forgot Password?</a></p>
                <div class="mb-3">
                    <button type="submit" class="btn btn-dark">Login</button>
                </div>

                <input type="hidden" asp-for="ReturnUrl" />
            </form>
          
        </div>
    </div>
</div>
@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var successToast = document.getElementById('success-toast');

        if (successToast) {
            var toast = new bootstrap.Toast(successToast);
            toast.show();

            // Center the success toast on the index page
            centerToast(successToast);

            setTimeout(function () {
                toast.hide();
            }, 2000); // Set the time in milliseconds (2 seconds in this example)
        }
    });

    function centerToast(toastElement) {
        var screenHeight = window.innerHeight;
        var toastHeight = toastElement.clientHeight;

        // Calculate the top position to center the toast
        var topPosition = (screenHeight - toastHeight) / 2;
        toastElement.style.top = topPosition + 'px';
    }
</script>

    <script>
        // Example starter JavaScript for disabling form submissions if there are invalid fields
        (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.querySelectorAll('.needs-validation')

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }

                        form.classList.add('was-validated')
                    }, false)
                })
        })()
    </script>
                        }